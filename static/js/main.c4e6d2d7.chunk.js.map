{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","type","setType","temp","min","max","feel","humidity","desc","main","city","weatherData","setWeatherData","checkInputType","match","convertFarenheit","toFixed","className","src","style","height","placeholder","onChange","event","value","target","onClick","fetch","then","response","json","body","data","temp_min","temp_max","feels_like","weather","description","name","class","id","concat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAqHeA,MAlHf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGyBJ,mBAAS,CAC7CK,KAAM,GACNC,IAAK,GACLC,IAAK,GACLC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,KAAM,GACNC,KAAM,KAXK,mBAGNC,EAHM,KAGOC,EAHP,KAmBPC,EAAiB,SAACd,GACtB,IACIE,EAAO,GAOX,OALEA,EADEF,EAAMe,MAFE,SAGH,UAEA,OAETZ,EAAQD,GACDF,GA0BHgB,EAAmB,SAACZ,GACxB,OAAQ,KAACA,EAAO,QAAwB,IAAIa,QAAQ,IAEtD,OACE,gCACE,sBAAKC,UAAU,YAAf,UACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKC,IAAK,qDAAsDC,MAAO,CAAEC,OAAQ,MACjF,4CAEF,sBAAKH,UAAU,SAAf,UACE,uBACEI,YAAY,mBACZC,SAtDc,SAACC,GACzB,IAAIC,EAAQX,EAAeU,EAAME,OAAOD,OACxCxB,EAASwB,IAqDCP,UAAU,iBAEZ,mBAAGS,QAzCO,WAClBC,MACW,SAAT1B,EAAA,4DACyDF,EADzD,yGAE2DA,EAF3D,+CAIC6B,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,IAAIC,EAAO,CACT7B,KAAMY,EAAiBgB,EAAKtB,KAAKN,MACjCC,IAAKW,EAAiBgB,EAAKtB,KAAKwB,UAChC5B,IAAKU,EAAiBgB,EAAKtB,KAAKyB,UAChC5B,KAAMS,EAAiBgB,EAAKtB,KAAK0B,YACjC5B,SAAUwB,EAAKtB,KAAKF,SACpBC,KAAMuB,EAAKK,QAAQ,GAAGC,YACtB5B,KAAMsB,EAAKK,QAAQ,GAAG3B,KACtBC,KAAMqB,EAAKO,MAEb1B,EAAeoB,OAqBcO,MAAM,gBAAgBC,GAAG,iBAGtD,qBAAKvB,UAAU,QAAf,SACwB,KAArBN,EAAYR,KACX,wBAEA,sBAAKc,UAAU,OAAf,UACE,gCACE,6BAAKN,EAAYD,OACjB,qBACEQ,IAAK,0CAA0CuB,OAAO9B,EAAYF,MAAMgC,OAAO,QAC/EtB,MAAO,CAAEC,OAAQ,OAEnB,oBAAIH,UAAU,OAAd,SAAsBN,EAAYH,UAGpC,gCACE,qBAAIS,UAAU,OAAd,UAAsBN,EAAYR,KAAlC,UAEA,8BACE,qBAAKc,UAAU,QAAf,eACCN,EAAYN,IAFf,QAEqB,qBAAKY,UAAU,QAAf,eAClBN,EAAYP,IAHf,UAKA,8BACE,qBAAKa,UAAU,QAAf,wBACCN,EAAYL,KAFf,UAIA,8BACE,qBAAKW,UAAU,QAAf,uBACCN,EAAYJ,SAFf,kBASV,6DCpGSmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c4e6d2d7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [weatherData, setWeatherData] = useState({\n    temp: \"\",\n    min: \"\",\n    max: \"\",\n    feel: \"\",\n    humidity: \"\",\n    desc: \"\",\n    main: \"\",\n    city: \"\",\n  });\n\n  const handleInputChange = (event) => {\n    let value = checkInputType(event.target.value);\n    setInput(value);\n  };\n\n  const checkInputType = (input) => {\n    let regex = /[0-9]/;\n    let type = \"\";\n    if (input.match(regex)) {\n      type = \"zipcode\";\n    } else {\n      type = \"city\";\n    }\n    setType(type);\n    return input;\n  };\n  const handleClick = () => {\n    fetch(\n      type === \"city\"\n        ? `https://api.openweathermap.org/data/2.5/weather?q=${input}&appid=1f747278bea90789bd8437272dc6268d`\n        : `https://api.openweathermap.org/data/2.5/weather?zip=${input},us&appid=1f747278bea90789bd8437272dc6268d`\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((body) => {\n        let data = {\n          temp: convertFarenheit(body.main.temp),\n          min: convertFarenheit(body.main.temp_min),\n          max: convertFarenheit(body.main.temp_max),\n          feel: convertFarenheit(body.main.feels_like),\n          humidity: body.main.humidity,\n          desc: body.weather[0].description,\n          main: body.weather[0].main,\n          city: body.name,\n        };\n        setWeatherData(data);\n      });\n  };\n\n  const convertFarenheit = (temp) => {\n    return ((temp - 273.15) * (9.0 / 5.0) + 32).toFixed(0);\n  };\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"left\">\n          <div className=\"title\">\n            <img src={\"https://soospitz.github.io/weather/svg/weather.svg\"} style={{ height: 55 }} />\n            <h1>Weather</h1>\n          </div>\n          <div className=\"search\">\n            <input\n              placeholder=\"City or Zip Code\"\n              onChange={handleInputChange}\n              className=\"search-input\"\n            ></input>\n            <i onClick={handleClick} class=\"fas fa-search\" id=\"search\"></i>\n          </div>\n        </div>\n        <div className=\"right\">\n          {weatherData.temp === \"\" ? (\n            <div></div>\n          ) : (\n            <div className=\"card\">\n              <div>\n                <h1>{weatherData.city}</h1>\n                <img\n                  src={\"https://soospitz.github.io/weather/svg/\".concat(weatherData.main).concat(\".svg\")}\n                  style={{ height: 140 }}\n                />\n                <h3 className=\"desc\">{weatherData.desc}</h3>\n              </div>\n\n              <div>\n                <h1 className=\"temp\">{weatherData.temp}°</h1>\n\n                <p>\n                  <div className=\"light\">H</div>\n                  {weatherData.max}° <div className=\"light\">L</div>\n                  {weatherData.min}°\n                </p>\n                <p>\n                  <div className=\"light\">Feels like</div>\n                  {weatherData.feel}°\n                </p>\n                <p>\n                  <div className=\"light\">Hummidity</div>\n                  {weatherData.humidity}%\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      <footer>© Soo Spitz 2020</footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}